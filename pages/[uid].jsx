import ProfileGrid from "@/components/Profile/ProfileGrid";
import ProfileName from "@/components/Profile/ProfileName";
import StatsFeed from "@/components/Profile/StatsFeed";
import Navbar from "@/components/Reusable/navbar";
import { db, auth } from "@/lib/firebase";
import {
  onSnapshot,
  collection,
  query,
  orderBy,
  setDoc,
  doc,
  deleteDoc,
  serverTimestamp,
} from "firebase/firestore";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState, useEffect } from "react";

const profile = () => {
  if (!auth.currentUser?.emailVerified)
    return (
      <div>
        <Navbar />
        <h1 className="flex justify-center items-center h-[90vh] capitalize text-3xl">
          please verify your email To continue using Kira
        </h1>
      </div>
    );
  const router = useRouter();
  const id = router.query.uid;

  const [user, setUser] = useState(null);
  const [userPost, setUserPost] = useState(null);

  const [canFollow, setcanFollow] = useState(true);

  useEffect(() => {
    if (!id) return;
    onSnapshot(collection(db, "users"), (snapshot) => {
      if (!snapshot.docs.filter((doc) => doc.id === id)[0])
        alert("User not found");

      setUser(snapshot.docs.filter((doc) => doc.id === id)[0].data());
    });
  }, [id, db]);

  useEffect(() => {
    onSnapshot(
      query(collection(db, "posts"), orderBy("timestamp", "desc")),
      (snapshot) => {
        setUserPost(
          snapshot.docs.filter((doc) => doc.data().usernameID === id)
        );
      }
    );
  }, [db]);

  useEffect(() => {
    if (!id) return;

    if (user?.email === auth.currentUser?.email) {
      setcanFollow(false);
    } else if (!auth.currentUser) {
      setcanFollow(false);
    } else {
      setcanFollow(true);
    }
  }),
    [id, user, auth];

  const [followers, setfollowers] = useState([]);
  const [isFollwer, setisFollwer] = useState(false);

  const [followings, setfollowings] = useState([]);
  const [isFollwing, setisFollwing] = useState(true);

  const [userFollowing, setuserFollowing] = useState();

  useEffect(() => {
    if (!user && !auth.currentUser) return;

    onSnapshot(
      query(collection(db, "users", user.userId, "followers")),
      (snapshot) => {
        setfollowers(snapshot.docs);
      }
    );

    onSnapshot(
      query(collection(db, "users", user.userId, "following")),
      (snapshot) => {
        setuserFollowing(snapshot.docs);
      }
    );

    if (auth.currentUser) {
      onSnapshot(
        query(collection(db, "users", auth.currentUser?.uid, "following")),
        (snapshot) => {
          setfollowings(snapshot.docs);
        }
      );
    }
  }, [db, user, auth.currentUser?.uid]);

  useEffect(() => {
    if (!auth.currentUser && !user) return;
    setisFollwing(
      followings.findIndex(
        (like) => like.data().userId === auth.currentUser?.uid
      ) !== -1
    );
  }, [followings, auth.currentUser?.uid, db, user]);

  useEffect(() => {
    if (!auth.currentUser && !user) return;
    setisFollwer(
      followers.findIndex((like) => like.data().userId === user.userId) !== -1
    );
  }, [followers, auth.currentUser?.uid, db, user]);

  const follow = async () => {
    if (!auth.currentUser && !user) return;
    if (isFollwer) {
      await deleteDoc(
        doc(db, "users", user.userId, "followers", auth.currentUser?.uid)
      );
      setisFollwer(false);
      console.log("unfollowed");
    } else {
      if (!auth.currentUser && !user) return;
      await setDoc(
        doc(db, "users", user.userId, "followers", auth.currentUser?.uid),
        {
          username: auth.currentUser?.displayName,
          userId: auth.currentUser?.uid,
        }
      );
      setisFollwer(true);
      console.log("followed");
    }

    if (isFollwing) {
      await deleteDoc(
        doc(db, "users", auth.currentUser?.uid, "following", user.userId)
      );
      setisFollwing(false);
      console.log("unfollowing");
    } else {
      await setDoc(
        doc(db, "users", auth.currentUser?.uid, "following", user.userId),
        {
          username: user?.name,
          userId: user?.userId,
        }
      );
      setisFollwing(true);
      console.log("following");
    }
  };

  return (
    <>
      <div className="">
        <Head>
          <title>{user?.name}</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/logo.svg" />
        </Head>

        <main
          className="w-full h-fit -z-10 bg-[black] bg-opacity-25 bg-cover bg-center bg-no-repeat bg-fixed backdrop-blur-[1px]"
          style={{ backgroundImage: `url(${user?.background})` }}
        >
          <div className="bg-fixed inset-0 bg-[#000] bg-opacity-40">
            <Navbar />
            <div className="flex flex-col sm:flex-row gap-5 justify-center sm:justify-around items-center mt-20 ">
              <ProfileName
                name={user?.name}
                pfp={user?.photoUrl}
                isVerified={false}
                canFollow={canFollow}
                followSystem={() => follow()}
                hasFollowed={isFollwer}
              />
              <div className="left">
                <StatsFeed
                  posts={userPost ? userPost.length + 1 : 0}
                  follower={followers ? followers.length : 0}
                  following={userFollowing ? userFollowing.length : 0}
                />
              </div>
            </div>

            {userPost ? (
              <ProfileGrid id={id} />
            ) : (
              <div className="flex justify-center items-center h-screen">
                <h1 className="text-3xl text-white">Loading...</h1>
              </div>
            )}
          </div>
        </main>
      </div>
    </>
  );
};

export default profile;
